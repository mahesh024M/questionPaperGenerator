const exp=require('express') 
const app=exp();
const fs = require('fs');  //to read files

// choosing marks for easy,medium and Hard type of questions
const MARKS={'Easy':5,'Medium':10,'Hard':15}

//Question class
class Question{
    constructor(question,subject,topic,difficulty,marks) {
       
        this.question=question;
        this.subject=subject;
        this.topic=topic;
        this.difficulty=difficulty;
        this.marks=marks;
    }
    
}
//question store which stores questions
class QuestionStore{
     constructor(questions){
          this.questions=questions.map(q=>new Question(q.question,q.subject,q.topic,q.difficulty,q.marks));
     }

     getQuestionsByDifficulty(difficulty){
           let required_questions=this.questions.filter((q)=>{
              if(q.difficulty===difficulty){
                return q.question;
              }
           })
           return required_questions;
     }


}


class QuestionpaperGenerator{
    constructor(questionStore){
        this.questionStore=questionStore;
    }

    generateQuestionpaper(totalMarks,difficultyLevels){
           if(totalMarks<=0){
            throw new Error('Total marks cannot be negative or zero');
           }
        let questionpaper=[]
        for(let qtype in difficultyLevels){
              
            let percentage=difficultyLevels[qtype];

            if(percentage<0){
                throw new Error('Percentage value of questions cannot be negative');
            }

            let marks=percentage*totalMarks;
             let numberOfquestions=marks/MARKS[qtype];

             let questions=this.questionStore.getQuestionsByDifficulty(qtype);

             if(numberOfquestions<=questions.length){
                let selectedquestions=questions.slice(0,numberOfquestions);
                questionpaper.push(...selectedquestions);
             }
             else{
                throw new Error(`There are no required number of questions for ${qtype} level`);
             }
        }
        if(questionpaper.length===0){
            console.log("Question cannot be generated by the given requirements");
        }
        return questionpaper;
    }

}


//Read json file data
const questionsData = JSON.parse(fs.readFileSync('questions.json', 'utf8'));
const questionStore = new QuestionStore(questionsData.questions);
const questionPaperGenerator = new QuestionpaperGenerator(questionStore);



try {
    const totalMarksValid = 100;
    const difficultyDistribution = { "Easy": 0.3, "Medium": 0.2, "Hard": 0.3 };
    const questionPaper=questionPaperGenerator.generateQuestionpaper(totalMarksValid,difficultyDistribution);
    console.log(questionPaper);
    fs.writeFileSync('generated_questions.json', JSON.stringify(questionPaper, null, 2), 'utf8');
  } catch (error) {
    console.error('Error:', error.message);
  }



const port=7000
app.listen(port,()=>{
    console.log(`server is running on ${port}`);
})